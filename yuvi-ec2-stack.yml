---
- name: setup Yuviapp stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC variable
      include_vars: vars/output_vars

    - name: Import yuvi setup variable
      include_vars: vars/yuvistackvars

    - name: create yuvi ec2 key
      ec2_key:
       name: yuvistack_2023
       region: "{{region}}"
      register: yuvistack_2023_out

    - name: store login key
      copy:
        content: "{{yuvistack_2023_out.key.private_key}}"
        dest: "./yuvistack_2023.pem"
        mode: 0600
      when: yuvistack_2023_out.changed

    - name: Create security group for LoadBalancer
      ec2_group:
         name: yuviELB-sg
         description: Allow port 80 from everywhere and allow port within sg
         region: "{{region}}"
         vpc_id: "{{vpcid}}"
         rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
      register: yuviELBsg_out

    - name: Create security group for yuviapp stack
      ec2_group:
          name: yuviStack-sg
          description: Allow port 22 from everywhere and allow port within sg
          region: "{{region}}"
          vpc_id: "{{vpcid}}"
          purge_rules: no
          rules:
                 - proto: tcp
                   from_port: 80
                   to_port: 80
                   group_id: "{{yuviELBsg_out.group_id}}"

                 - proto: tcp
                   from_port: 22
                   to_port: 22
                   group_id: "{{BastionSGid}}"
      register: yuviStackSG_out

    - name: update security group with its own sg id
      ec2_group:
          name: yuviStack-sg
          description: allow port 22 from everywhere and all port within sg
          region: "{{region}}"
          vpc_id: "{{vpcid}}"
          purge_rules: no
          rules:
           - proto: all
             group_id: "{{yuviStackSG_out.group_id}}"

    - name: Creating nginx instance
      ec2_instance:
         name: "Web01-Nginx"
         key_name: yuvki_2023
         region: "{{region}}"
         vpc_subnet_id: "{{privsub1id}}"
         instance_type: t2.micro
         security_group: yuviStack-sg
         image_id: "{{nginx_ami}}"
         wait: yes
         wait_timeout: 300
         tags:
           Name: "Web01-Nginx"
           Project: Yuviapp
           Owner: DevOps Team
      register: web01_out

    - name: Creating Tomcat instance
      ec2_instance:
          name: "App01-Tomcat"
          key_name: yuvki_2023
          region: "{{region}}"
          vpc_subnet_id: "{{privsub1id}}"
          instance_type: t2.micro
          security_group: yuviStack-sg
          image_id: "{{tomcat_ami}}"
          wait: yes
          wait_timeout: 300
          tags:
            Name: "App01-Nginx"
            Project: Yuviapp
            Owner: DevOps Team
      register: app01_out

    - name: Creating Memcache instance
      ec2_instance:
          name: "Mc01-Memcache"
          key_name: yuvki_2023
          region: "{{region}}"
          vpc_subnet_id: "{{privsub1id}}"
          instance_type: t2.micro
          security_group: yuviStack-sg
          image_id: "{{memcache_ami}}"
          wait: yes
          wait_timeout: 300
          tags:
            Name: "Mc01-Memcache"
            Project: Yuviapp
            Owner: DevOps Team
      register: Mem01_out



    - name: Creating RabbitMQ instance
      ec2_instance:
          name: "RMQ01-RabbitMQ"
          key_name: yuvki_2023
          region: "{{region}}"
          vpc_subnet_id: "{{privsub1id}}"
          instance_type: t2.micro
          security_group: yuviStack-sg
          image_id: "{{rmq_ami}}"
          wait: yes
          wait_timeout: 300
          tags:
            Name: "RMQ01-RabbitMQ"
            Project: Yuviapp
            Owner: DevOps Team
      register: rmq01_out



    - name: Creating Mysql instance
      ec2_instance:
          name: "Mysql"
          key_name: yuvki_2023
          region: "{{region}}"
          vpc_subnet_id: "{{privsub1id}}"
          instance_type: t2.micro
          security_group: yuviStack-sg
          image_id: "{{mysql_ami}}"
          wait: yes
          wait_timeout: 300
          tags:
            Name: "Mysql"
            Project: Yuviapp
            Owner: DevOps Team
      register: mysql_out

    - debug:
       var: mysql_out.instances[0].instance_id

    - local_action:
        module: ec2_elb_lb
        name: "yuvi-elb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{web01_out.instances[0].instance_id}}"
        purge_instance_ids: true
        security_group_ids: "{{yuviELBsg_out.group_id}}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http #options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Hosts IP & Name
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
         web01_ip: {{ web01_out.instance[0].private_ip }}
         app01_ip: {{ app01_out.instance[0].private_ip }}
         rmq01_ip: {{ rmq01_out.instance[0].private_ip }}
         mc01_ip: {{ Mem01_out.instance[0].private_ip }}
         db01_ip: {{ mysql_out.instance[0].private_ip }}

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_yuvi.pem
        dest: provision-stack/loginkey_yuvi.pem
        mode: '0400'

    - name: Insert/update Inventory file provision-stack
      blockinfile:
        path: provision-stack/inventory-yuvi
        block: |
           web01 ansible_host= {{web01_out.instances[0].private_ip }}
           app01 ansible_host={{ app01_out.instances[0].private_ip }}
           rmq01 ansible_host={{ rmq01_out.instances[0].private_ip }}
           mc01 ansible_host={{ Mem01_out.instances[0].private_ip }}
           db01 ansible_host={{ mysql_out.instances[0].private_ip }}
           cntl ansible_host=127.0.0.1 ansible_connection=local

           [websrvgrp]
            web01

           [appservpgrp]
            app01

           [rmqsrvgrp]
            rmq01

           [mcsrvgrp]
            mc01

           [dbsrvgrp]
            db01

           [control]
            cntl

           [stack_inst:children]
            websrvgrp
            appservpgrp
            rmqsrvgrp
            mcsrvgrp
            dbsrvgrp

           [stack_inst:vars]
            ansible_user=ubuntu
            ansible_ssh_private_key_file=loginkey_yuvi.pem
            #ansible_python_interpreter=/usr/bin/python3

